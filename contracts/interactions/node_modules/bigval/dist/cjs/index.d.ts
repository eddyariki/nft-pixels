import { Decimal } from 'decimal.js';
/**
 * `BigVal` configuration.
 */
export interface BigValConfig {
    /**
     * No. of decimals values will have. Default is 18.
     */
    decimals?: number;
}
/**
 * Get whether given value is a `BigVal` instance.
 * @param v A value.
 */
export declare const isBigVal: (v: any) => boolean;
/**
 * Represents an arbitrarily large or small number with decimals.
 *
 * All the arithmetic methods are immutable, i.e. they return a new `BigVal` instance, leaving the original inputs unchanged.
 *
 * At any given time a `BigVal` instance operates at a particular number _scale_. The scale is based on the the no. of `decimals` specified in the configuration (`BigValConfig`).
 *
 * The `min` scale is for numbers which do not have decimal places since they are already denominated in the smallest possible unit. The `coins` scale is for numbers which implicitly have decimal places.
 *
 * For example, if a given `BigVal` has `decimals = 2` then the following two numbers are equivalent in value:
 *
 * * scale = `min`, value = `100`
 * * scale = `coins`, value = `1`
 *
 * If `decimals = 18` (this is the default) then the following two numbers are equivalent in value:
 *
 * * scale = `min`, value = `1000000000000000000`
 * * scale = `coins`, value = 1
 *
 * The use of scales like this makes it easy to convert between chain-friendly and user-friendly values and perform arithmetic at the desired precision.
 */
export declare class BigVal {
    /**
     * @internal
     */
    _n: Decimal;
    /**
     * @internal
     */
    _scale: string;
    /**
     * @internal
     */
    _config: BigValConfig;
    /**
     * Multiply with another number.
     */
    mul: (v: any) => BigVal;
    /**
     * Subtract another number from this one.
     */
    sub: (v: any) => BigVal;
    /**
     * Divide this by another number.
     */
    div: (v: any) => BigVal;
    /**
     * Add another number to this one.
     */
    add: (v: any) => BigVal;
    /**
     * Get whether this is greater than another number.
     */
    gt: (v: any) => boolean;
    /**
     * Get whether this is greater than or equal to another number.
     */
    gte: (v: any) => boolean;
    /**
     * Get whether this is less than another number.
     */
    lt: (v: any) => boolean;
    /**
     * Get whether this is less than or equal to than another number.
     */
    lte: (v: any) => boolean;
    /**
     * Get whether this is equal to another number.
     */
    eq: (v: any) => boolean;
    /**
     * @constructor
     * @param src Input number. If this is a `BigVal` instance then `scale` and `config` parameters will be ignored.
     * @param scale The scale of the input number. Default is `min`.
     * @param config Custom configuration for this instance.
     */
    constructor(src: any, scale?: string, config?: BigValConfig);
    /**
     * Get current scale.
     */
    get scale(): string;
    /**
     * Get config.
     */
    get config(): BigValConfig;
    /**
     * Round to the nearest whole number.
     */
    round(): BigVal;
    /**
     * Convert to 'min' scale.
     */
    toMinScale(): BigVal;
    /**
     * Convert to 'coins' scale.
     */
    toCoinScale(): BigVal;
    /**
     * Convert to given scale.
     *
     * @param scale Scale to convert to.
     */
    toScale(scale: string): BigVal;
    /**
     * Get string representation in given base.
     *
     * @param base Base to represent in. Default is 10.
     */
    toString(base?: number): string;
    /**
     * Get base-10 string representation to given no. of decimal places.
     * @param numDecimals No. of decimal places to show.
     */
    toFixed(numDecimals: number): string;
    /**
     * Get base-10 number representation.
     */
    toNumber(): number;
}
