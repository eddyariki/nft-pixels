/// <reference types="ledgerhq__hw-transport" />
/// <reference types="node" />
import Transport from '@ledgerhq/hw-transport';
import { WalletBase } from "./base";
/**
 * Ledger hardware wallet.
 */
export declare class LedgerWallet extends WalletBase {
    protected _address: string;
    protected _transport: any;
    protected _activeTransportInstances: Record<string, Transport>;
    /**
     * Constructor.
     */
    protected constructor(transport: any, address: string);
    /**
     * Get whether there are pending actions on the Ledger.
     *
     * If there are pending actions then Ledger transport instances cannot be closed until the user either
     * accepts or rejects those actions on the Ledger.
     */
    hasPendingActions(): Boolean;
    /**
     * Connect to the Ledger hardware wallet.
     *
     * @param ledgerTransports The various Ledger transports to try.
     * @throws {Error} If it fails to connect.
     */
    static connect(ledgerTransports: any[]): Promise<LedgerWallet>;
    protected _withLedger(cb: Function): Promise<any>;
    protected _sign(rawTx: Buffer): Promise<string>;
    protected _getAddress(): string;
    serialize(): string;
}
