import { Buffer } from 'buffer';
import { ContractMetadata } from '../common';
/**
 * Common argument delimiter in elrond.
 */
export declare const ARGS_DELIMITER = "@";
/**
 * Arwen VM indicator value.
 */
export declare const ARWEN_VIRTUAL_MACHINE = "0500";
/**
 * Convert ASCII string to its HEX representation.
 * @param arg ASCII string.
 */
export declare const stringToHex: (arg: string) => string;
/**
 * Convert Hex string to its ASCII representation.
 * @param arg hex string.
 */
export declare const hexToString: (arg: string) => string;
/**
 * Convert number to its HEX representation.
 *
 * This will prefix the returned string with `0`'s in order to ensure an even length.
 *
 * If `number` is a `BigVal` then it will be converted to its smallest scale prior to generating a hex representation.
 *
 * @param arg number.
 */
export declare const numberToHex: (arg: any) => string;
/**
 * Get KECCAK hash of given input
 * @param bytes The input.
 */
export declare const keccak: (bytes: Buffer) => Buffer;
/**
 * Get string representation of given contract metadata.
 *
 * (Forked from https://github.com/ElrondNetwork/elrond-sdk/blob/master/erdjs/src/smartcontracts/codeMetadata.ts)
 *
 * @param contractMetadata Contract metadata.
 */
export declare const contractMetadataToString: (contractMetadata: ContractMetadata) => string;
/**
 * Get hex representation of given bech32 address.
 *
 * @param address The address in bech32 format.
 */
export declare const addressToHexString: (address: string) => string;
/**
 * Get bech32 address from its hex representation.
 *
 * @param hex The address in hex format.
 */
export declare const hexStringToAddress: (hex: string) => string;
/**
 * Max no. of shards.
 */
export declare const NUM_SHARDS = 3;
/**
 * Get shard number for given address.
 *
 * @param address The address in bech32 format.
 * @param numShards The no. of shards in the network.
 * @return -1 if metachain, >=0 otherwise
 */
export declare const getAddressShard: (address: string, numShards?: number) => number;
/**
 * Get shard number for given DNS name.
 *
 * @param name The DNS name.
 * @param numShards The no. of shards in the network.
 * @return -1 if metachain, >=0 otherwise
 */
export declare const getNameShard: (name: string, numShards?: number) => number;
/**
 * The NULL address in HEX format.
 */
export declare const ADDRESS_ZERO_HEX: string;
/**
 * The NULL address in bech32 format.
 */
export declare const ADDRESS_ZERO_BECH32 = "erd1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq6gq4hu";
/**
 * Convert query result value to hex.
 * @internal
 */
export declare const queryResultValueToHex: (val: string) => string;
/**
 * Convert query result value to string.
 * @internal
 */
export declare const queryResultValueToString: (val: string) => string;
