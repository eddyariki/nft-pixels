/// <reference types="node" />
import { WalletBase } from './base';
import { KeyPair } from './crypto/browser/ed25519Keypair';
/**
 * Generate a random mnemonic.
 */
export declare const generateMnemonic: () => string;
/**
 * Basic wallet.
 */
export declare class BasicWallet extends WalletBase {
    protected _keyPair: KeyPair;
    /**
     * Constructor.
     */
    protected constructor(keyPair: KeyPair);
    /**
     * Generate a wallet using a random mnemonic.
     */
    static generateRandom(): BasicWallet;
    /**
     * Get whether this class can deserialize the given wallet data.
     *
     * @return {boolean} true if can, false if cannot.
     */
    static canDeserialize(data: string): boolean;
    /**
     * Load a wallet from previously serialized wallet data.
     *
     * @throws {Error} If loading fails.
     */
    static fromSerialized(data: string): BasicWallet;
    /**
     * Load a wallet using from a mnemonic.
     *
     * @throws {Error} If loading fails.
     */
    static fromMnemonic(mnemonic: string): BasicWallet;
    /**
     * Load a wallet from a JSON key file string.
     *
     * @throws {Error} If loading fails.
     */
    static fromJsonKeyFileString(json: string, password: string): BasicWallet;
    /**
     * Load a wallet from a PEM file string.
     *
     * @throws {Error} If loading fails.
     */
    static fromPemFileString(pem: string): BasicWallet;
    protected _sign(rawTx: Buffer | Uint8Array): Promise<string>;
    protected _getAddress(): string;
    serialize(): string;
}
