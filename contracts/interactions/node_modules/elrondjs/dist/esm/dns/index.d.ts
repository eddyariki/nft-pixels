import { TransactionOptions, TransactionReceipt } from '../common';
import { TransactionOptionsBase } from '../lib';
interface DnsConfig {
    /**
     * An array of DNS contract addresses indexed by shard number.
     *
     * If ommitted then default built-in mappings will be used.
     */
    shardContracts: string[];
}
/**
 * Interface for working with Elrond DNS.
 */
export declare class Dns extends TransactionOptionsBase {
    _config: DnsConfig;
    /**
     * Constructor.
     *
     * @param config DNS configuration.
     * @param options Base transaction options.
     */
    constructor(transactionOptions?: TransactionOptions, dnsConfig?: DnsConfig);
    /**
     * Resolve given DNS name.
     *
     * @param name Name to resolve, in the form `XXX.elrond`.
     * @param options Overrides for options passed in via the constructor.
     *
     * @return Empty string if name is not registered.
     */
    resolve(name: string, options?: TransactionOptions): Promise<string>;
    /**
     * Register a DNS name for the sender.
     *
     * @param name The name to register.
     * @param options Transaction options overrides.
     */
    register(name: string, options?: TransactionOptions): Promise<TransactionReceipt>;
}
export {};
