import { BigVal } from 'bigval';
import { Api, ApiConfig } from '../lib';
import { Provider, Address, ContractQueryParams, ContractQueryResult, SignedTransaction, TransactionReceipt, TransactionOnChain, TokenData } from '../common';
/**
 * Parse raw transaction data from the chain.
 *
 * @param tx Raw transaction data.
 */
export declare const parseRawTransaction: (tx: any) => TransactionOnChain;
/**
 * A `Provider` which speaks to an Elrond Proxy endpoint.
 */
export declare class ProxyProvider extends Api implements Provider {
    /**
     * Constructor.
     *
     * @param api Proxy endpoint base URL.
     * @param config Configuration.
     */
    constructor(api: string, config?: ApiConfig);
    /**
     * Sanitize balance value returned from the Elrond proxy.
     * @param balance
     */
    protected _sanitizeBalance(balance: string): BigVal;
    /**
     * Parse a reponse.
     *
     * @param data The returned data to parse.
     * @param errorMsg Prefix for any error messages thrown.
     * @throws {Error} If response indicates a failure or parsing failed.
     */
    protected _parseResponse(data: any, errorMsg: string): any;
    getNetworkConfig(): Promise<{
        version: any;
        chainId: any;
        gasPerDataByte: any;
        minGasPrice: any;
        minGasLimit: any;
        minTransactionVersion: any;
    }>;
    getAddress(address: string): Promise<Address>;
    getESDTData(address: string, token: string): Promise<TokenData>;
    queryContract(params: ContractQueryParams): Promise<ContractQueryResult>;
    sendSignedTransaction(signedTx: SignedTransaction): Promise<string>;
    waitForTransaction(txHash: string): Promise<TransactionReceipt>;
    getTransaction(txHash: string): Promise<TransactionOnChain>;
}
