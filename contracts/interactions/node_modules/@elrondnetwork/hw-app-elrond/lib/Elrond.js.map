{"version":3,"sources":["../src/Elrond.js"],"names":["Elrond","constructor","transport","scrambleKey","decorateAppAPIMethods","getAddress","account","index","display","cla","ins","p1","p2","data","Buffer","alloc","writeInt32BE","writeUInt32BE","response","send","addressLength","address","slice","toString","setAddress","signTransaction","rawTx","curveMask","apdus","offset","length","isFirst","maxChunkSize","hasMore","chunkSize","apdu","copy","push","Error","getAppConfiguration","contractData","accountIndex","addressIndex","version"],"mappings":"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","sourcesContent":["//@flow\n\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nexport default class Elrond {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"eGLD\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"getAddress\", \"setAddress\", \"signTransaction\", \"getAppConfiguration\"],\n      scrambleKey\n    );\n  }\n\n  async getAddress(\n    account: number,\n    index: number,\n    display?: boolean,\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string,\n  }> {\n    const cla = 0xed;\n    const ins = 0x03;\n    const p1 = display ? 0x01 : 0x00;\n    const p2 = 0x00;\n    const data = Buffer.alloc(8);\n\n    data.writeInt32BE(account, 0);\n    data.writeUInt32BE(index, 4);\n\n    const response = await this.transport.send(cla, ins, p1, p2, data);\n\n    const addressLength = response[0];\n    const address = response.slice(1, 1 + addressLength).toString(\"ascii\");\n\n    return {address};\n  }\n\n  async setAddress(\n    account: number,\n    index: number,\n    display?: boolean,\n  ) {\n    const cla = 0xed;\n    const ins = 0x05;\n    const p1 = display ? 0x01 : 0x00;\n    const p2 = 0x00;\n    const data = Buffer.alloc(8);\n\n    data.writeInt32BE(account, 0);\n    data.writeUInt32BE(index, 4);\n\n    return await this.transport.send(cla, ins, p1, p2, data);\n  }\n\n  async signTransaction(\n    rawTx: Buffer,\n  ): Promise<string> {\n    const curveMask = 0x80;\n\n    const apdus = [];\n    let offset = 0;\n\n    while (offset !== rawTx.length) {\n      const isFirst = offset === 0;\n      const maxChunkSize = 150;\n\n      const hasMore = offset + maxChunkSize < rawTx.length;\n      const chunkSize = hasMore ? maxChunkSize : rawTx.length - offset;\n\n      const apdu = {\n        cla: 0xed,\n        ins: 0x04,\n        p1: isFirst ? 0x00 : 0x80,\n        p2: curveMask,\n        data: Buffer.alloc(chunkSize),\n      };\n\n      rawTx.copy(apdu.data, 0, offset, offset + chunkSize);\n\n      apdus.push(apdu);\n      offset += chunkSize;\n    }\n\n    let response = Buffer.alloc(0);\n    for (let apdu of apdus) {\n      response = await this.transport.send(\n        apdu.cla,\n        apdu.ins,\n        apdu.p1,\n        apdu.p2,\n        apdu.data\n      );\n    }\n\n    if (response.length !== 67 || response[0] !== 64) {\n      throw new Error(\"invalid signature receuved from ledger device\")\n    }\n\n    return response.slice(1, response.length - 2).toString(\"hex\");\n  }\n\n  async getAppConfiguration(): Promise<{\n    version: string,\n  }> {\n    const response = await this.transport.send(0xed, 0x02, 0x00, 0x00);\n    return {\n      contractData: response[0],\n      accountIndex: response[1],\n      addressIndex: response[2],\n      version: `${response[3]}.${response[4]}.${response[5]}`\n    }\n  }\n}"],"file":"Elrond.js"}