var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Wallet base class.
 */
export class WalletBase {
    address() {
        return this._getAddress();
    }
    signTransaction(tx, provider) {
        return __awaiter(this, void 0, void 0, function* () {
            const address = this.address();
            const { nonce: nonceOnChain } = yield provider.getAddress(address);
            const { chainId } = yield provider.getNetworkConfig();
            const txData = {
                nonce: tx.nonce || nonceOnChain,
                value: tx.value.toMinScale().toString(),
                receiver: tx.receiver,
                sender: address,
            };
            if (tx.gasPrice) {
                txData.gasPrice = parseInt(`${tx.gasPrice}`, 10);
            }
            if (tx.gasLimit) {
                txData.gasLimit = parseInt(`${tx.gasLimit}`, 10);
            }
            if (tx.data) {
                txData.data = Buffer.from(tx.data).toString('base64');
            }
            txData.chainID = chainId;
            txData.version = 1;
            const signature = yield this._sign(Buffer.from(JSON.stringify(txData)));
            const ret = Object.assign(Object.assign({}, txData), { data: tx.data ? txData.data : '', signature });
            ret.chainId = ret.chainID;
            delete ret.chainID;
            return ret;
        });
    }
}
