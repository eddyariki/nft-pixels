import { BigVal } from 'bigval';
import { TransactionOptions, TokenConfig, TokenInfo, TransactionReceipt, ContractQueryResult, ContractQueryResultParseOptions } from '../common';
import { TransactionOptionsBase } from '../lib';
import { Contract } from '../contract';
/**
 * Parse token info result.
 *
 * Wrapper around `parseQueryResult()` which performs additional processing.
 *
 * @param result The query result.
 * @param options Parsing options.
 *
 * @internal
 */
export declare const parseTokenInfo: (result: ContractQueryResult, options: ContractQueryResultParseOptions, regex: RegExp) => (string | number | BigVal | boolean);
/**
 * Address of metachain contract which handles ESDT token issuance and all other operations.
 */
export declare const METACHAIN_TOKEN_CONTRACT = "erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzllls8a5w6u";
/**
 * Interface for working with ESDT tokens.
 */
export declare class Token extends TransactionOptionsBase {
    protected _id: string;
    protected _contractInstance: Contract;
    /**
     * Constructor.
     *
     * @param id Token identifier.
     * @param contractInstance `Contract` instance for performing operations.
     * @param options Base transaction options.
     */
    private constructor();
    /**
     * Get token id.
     */
    get id(): string;
    /**
     * Get all token identifiers in system.
     * @param options Transaction options for interacting with the blockchain. These will be the default options used for all subsequent operations.
     */
    static getAllTokenIds(options: TransactionOptions): Promise<string[]>;
    /**
     * Create a new token.
     *
     * Token name must be between 10 and 20 characters (inclusive) and must only contain alphanumeric characters: `[A-Za-z0-9]`.
     * Ticker name must be between 3 and 10 characters (inclusive) and must only contain capital alphanumeric characters: `[A-Z0-9]`.
     *
     * @param name Human-readable name of token.
     * @param ticker Ticker name of token.
     * @param initialSupply Initial total supply of the token, taking into account the no. of decimal places. Denominated in base-10.
     * @param numDecimals No. of decimals token balances have. The recommended value is 18.
     * @param initialConfig Initial token configuration.
     * @param options Transaction options for interacting with the blockchain. These will be the default options used for all subsequent operations.
     */
    static new(name: string, ticker: string, initialSupply: BigVal, numDecimals: number | undefined, initialConfig: TokenConfig, options: TransactionOptions): Promise<Token>;
    /**
     * Load a token.
     *
     * This will throw an error if the given token doesn't exist.
     *
     * @param id Token identifier.
     * @param options Transaction options for interacting with the blockchain. These will be the default options used for all subsequent operations.
     */
    static load(id: string, options: TransactionOptions): Promise<Token>;
    /**
     * Get token information.
     *
     * @param options Transaction options to override the default ones with.
     */
    getInfo(options?: TransactionOptions): Promise<TokenInfo>;
    /**
     * Get balance of given address.
     *
     * @param address Address in bech-32 format.
     * @param options Transaction options to override the default ones with.
     */
    balanceOf(address: string, options?: TransactionOptions): Promise<BigVal>;
    /**
     * Transfer tokens to another address.
     *
     * @param to Address to transfer to.
     * @param amount No. of tokens to transfer.
     * @param options Transaction options to override the default ones with.
     */
    transfer(to: string, amount: BigVal, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Mint more tokens.
     *
     * @param amount Amount to mint.
     * @param address Address to mint to. If ommitted tokens will be minted to the current config owner.
     * @param options Transaction options to override the default ones with.
     */
    mint(amount: string, address?: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Burn one's own tokens.
     * @param amount Amount to burn.
     * @param options Transaction options to override the default ones with.
     */
    burn(amount: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Pause token transfers, but continue to allow burning and minting.
     * @param options Transaction options to override the default ones with.
     */
    pause(options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Unpause token transfers.
     * @param options Transaction options to override the default ones with.
     */
    unPause(options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Freeze transfers to/from a specific account.
     * @param address Account address in bech32 format.
     * @param options Transaction options to override the default ones with.
     */
    freeze(address: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Unfreeze transfers to/from a specific account.
     * @param address Account address in bech32 format.
     * @param options Transaction options to override the default ones with.
     */
    unFreeze(address: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Wipe all tokens from a currently frozen account.
     * @param address Account address in bech32 format.
     * @param options Transaction options to override the default ones with.
     */
    wipe(address: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Transfer ownership of token to another account.
     * @param newOwner New owner's address in bech32 format.
     * @param options Transaction options to override the default ones with.
     */
    changeOwner(newOwner: string, options?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Update the token configuration.
     * @param newConfig New token configuration.
     * @param options Transaction options to override the default ones with.
     */
    updateConfig(newConfig: TokenConfig, options?: TransactionOptions): Promise<TransactionReceipt>;
}
