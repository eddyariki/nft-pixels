"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sign = exports.generatePairFromMnemonic = exports.generatePublicKey = exports.HD_PREFIX = void 0;
const ed25519_hd_key_1 = require("ed25519-hd-key");
const bip39 = __importStar(require("bip39"));
const tweetnacl_1 = __importDefault(require("tweetnacl"));
/**
 * @internal
 */
exports.HD_PREFIX = "m/44'/508'/0'/0'";
/**
 * @internal
 */
exports.generatePublicKey = (privateKey) => {
    const kp = tweetnacl_1.default.sign.keyPair.fromSecretKey(privateKey);
    return kp.publicKey;
};
/**
 * @internal
 */
exports.generatePairFromMnemonic = (mnemonic) => {
    if (!bip39.validateMnemonic(mnemonic)) {
        throw new Error("wrong mnemonic format");
    }
    const seed = bip39.mnemonicToSeedSync(mnemonic, '');
    const { key: privateKey } = ed25519_hd_key_1.derivePath(`${exports.HD_PREFIX}/${0}'`, seed);
    const arr = Uint8Array.from(privateKey);
    const kp = tweetnacl_1.default.sign.keyPair.fromSeed(arr);
    return {
        privateKey: kp.secretKey,
        publicKey: kp.publicKey,
    };
};
/**
 * @internal
 */
exports.sign = (message, privateKey) => {
    const sig = tweetnacl_1.default.sign(message, privateKey);
    // By default, the signature contains the message at the end, we don't need this
    return sig.slice(0, sig.length - message.length);
};
